@model Product


@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>Enter Barcode</title>
    <script type="text/javascript" src="\lib\jquery\dist\jquery.min.js"></script>
    <script type="text/javascript" src="\lib\bootstrap\dist\js\bootstrap.min.js"></script>
    <link rel="stylesheet" href="\lib\bootstrap\dist\css\bootstrap.min.css">
    <script type="text/javascript" src="\lib\serratus-quaggaJS-eff0c5a\dist\quagga.js"></script>

    <link rel="stylesheet" href="\lib\font-awesome-4.7.0\css\font-awesome.min.css">
</head>
<body>

<div>
    <form asp-action="Index" method="post" id="form" enctype="multipart/form-data">
    <div class="row">
        <div class="col-lg-6">
            <div class="input-group">
                <input id="scanner_input" name="codeBarre" class="form-control" placeholder="Click the button to scan an EAN..." type="text"/>
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" data-toggle="modal" data-target="#livestream_scanner">
                        <i class="fa fa-barcode"></i>
                    </button>
                </span>
            </div><!-- /input-group -->
        </div><!-- /.col-lg-6 -->
    </div><!-- /.row -->
    <div class="modal" id="livestream_scanner" name="livestream_scanner">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Barcode Scanner</h4>
                </div>
                <div class="modal-body" style="position: static">
                    <div id="interactive" class="viewport"></div>
                    <div class="error"></div>
                </div>
                <div class="modal-footer">
                    <label class="btn btn-default pull-left">
                        <i class="fa fa-camera"></i> Use camera app
                        <input type="file" name="fichier" accept="image/*" capture="camera" class="hidden"/>
                    </label>
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <div>
            <input type="submit" value="Show Product" class="btn btn-default" />
        </div>
    </form>


    <style>
        #interactive.viewport {position: relative; width: 100%; height: auto; overflow: hidden; text-align: center;}
        #interactive.viewport > canvas, #interactive.viewport > video {max-width: 100%;width: 100%;}
        canvas.drawing, canvas.drawingBuffer {position: absolute; left: 0; top: 0;}
    </style>
    <script type="text/javascript">
        jQuery(document).ready(function () {
//            $(".modal").show();
            // Create the QuaggaJS config object for the live stream
                var liveStreamConfig = {
                    inputStream: {
                        type: "LiveStream",
                        constraints: {
                            width: { min: 640 },
                            height: { min: 480 },
                            aspectRatio: { min: 1, max: 100 },
                            facingMode: "environment" // or "user" for the front camera
                        }
                    },
                    locator: {
                        patchSize: "large",
                        halfSample: true
                    },
                    numOfWorkers: (navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4),
                    decoder: {
                        "readers": [
                            { "format": "ean_reader", "config": {} }
                        ],
             },
                locate: true
            };
            // The fallback to the file API requires a different inputStream option.
            // The rest is the same
            var fileConfig = $.extend(
                {},
                liveStreamConfig,
                {
                    inputStream: {
                        size: 800
                    }
                }
            );
            // Start the live stream scanner when the modal opens
            $('#livestream_scanner').on('shown.bs.modal',
                function(e) {
                    Quagga.init(
                        liveStreamConfig,
                        function(err) {
                            if (err) {
                                $('#livestream_scanner .modal-body .error')
                                    .html(
                                        '<div class="alert alert-danger"><strong><i class="fa fa-exclamation-triangle"></i> ' +
                                        err.name +
                                        '</strong>: ' +
                                        err.message +
                                        '</div>');
                                window.Quagga.stop();
                                return;
                            }
                            window.Quagga.start();
                        }
                    );
                });

            // Make sure, QuaggaJS draws frames an lines around possible
            // barcodes on the live stream
            Quagga.onProcessed(function(result) {
                var drawingCtx = Quagga.canvas.ctx.overlay,
                    drawingCanvas = Quagga.canvas.dom.overlay;

                if (result) {
                    if (result.boxes) {
                        drawingCtx.clearRect(0,
                            0,
                            parseInt(drawingCanvas.getAttribute("width")),
                            parseInt(drawingCanvas.getAttribute("height")));
                        result.boxes.filter(function(box) {
                            return box !== result.box;
                        }).forEach(function(box) {
                            Quagga.ImageDebug.drawPath(box,
                                { x: 0, y: 1 },
                                drawingCtx,
                                { color: "green", lineWidth: 2 });
                        });
                    }

                    if (result.box) {
                        Quagga.ImageDebug.drawPath(result.box,
                            { x: 0, y: 1 },
                            drawingCtx,
                            { color: "#00F", lineWidth: 2 });
                    }

                    if (result.codeResult && result.codeResult.code) {
                        Quagga.ImageDebug.drawPath(result.line,
                            { x: 'x', y: 'y' },
                            drawingCtx,
                            { color: 'red', lineWidth: 3 });
                    }
                }
            });

            // Once a barcode had been read successfully, stop quagga and
            // close the modal after a second to let the user notice where
            // the barcode had actually been found.
            Quagga.onDetected(function(result) {
                if (result.codeResult.code) {
                    $('#scanner_input').val(result.codeResult.code);
                    Quagga.stop();
                    setTimeout(function() { $('#livestream_scanner').modal('hide'); }, 1000);
                }
            });

            // Stop quagga in any case, when the modal is closed
            $('#livestream_scanner').on('hide.bs.modal',
                function() {
                    if (Quagga) {
                        Quagga.stop();
                    }
                });

            // Call Quagga.decodeSingle() for every file selected in the
            // file input
            $("#livestream_scanner input:file").on("change",
                function (e) {
                    if (e.target.files && e.target.files.length) {
                        Quagga.decodeSingle($.extend({}, fileConfig, { src: URL.createObjectURL(e.target.files[0]) }),
                            function (result) {});
                    }
                });
        });
    </script>


<!--   <form asp-action="Index" method="post" id="form" enctype="multipart/form-data">

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="Barcode" class="control-label"></label>
            <input asp-for="Barcode" class="form-control" name="barcode"/>
            <span asp-validation-for="Barcode" class="text-danger"></span>

            
            <input type="file" name="fichier"/>
            <input type="submit" value="Upload"/>

        </div>

        <div class="form-group">
            <input type="submit" value="Show Product" class="btn btn-default"/>
    </div>
    </form>
--> 
</div>
</body>
</html>